#include <iostream>
#include <vector>
#include <set>


int main() {
    int n, start, finish;
    std::cin >> n >> start >> finish;

    std::vector<std::vector<std::pair<int, int>>> graph(n + 1);
    std::vector<int> dist(n + 1, 1e9);

    for (int i = 1; i < n + 1; ++i) {
        for (int j = 1; j < n + 1; ++j) {
            int a;
            std::cin >> a;
            if (a > 0) {
                graph[i].push_back({j, a});
            }
        }
    }

    dist[start] = 0;
    std::set<std::pair<int, int>> queue;
    queue.insert({start, dist[start]});
    while (!queue.empty()) {
        int v = queue.begin()->first;
        queue.erase(queue.begin());
        for (auto neighbor: graph[v]) {
            int ver = neighbor.first;
            int pr = neighbor.second;
            if (dist[v] + pr < dist[ver]) {
                queue.erase({ver, dist[ver]});
                dist[ver] = dist[v] + pr;
                queue.insert({ver, dist[ver]});
            }
        }
    }

    if (dist[finish] != 1e9) {
        std::cout << dist[finish];
    } else {
        std::cout << -1;
    }

    return 0;
}
